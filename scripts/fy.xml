<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget name="Main Window" parent="main_window">
  <Tab tab_name="tab1" containers="1">
   <Container>
    <DockSplitter orientation="-" sizes="0.332957;0.334086;0.332957" count="3">
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Dots" flip_x="false">
       <range top="1146.676596" bottom="-59.633720" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="/vins_estimator/imu_propagate/pose/pose/position/x" color="#1f77b4"/>
       <curve name="/vins_estimator/odometry/pose/pose/position/x" color="#ff7f0e"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="LinesAndDots" flip_x="false">
       <range top="20.191198" bottom="-795.171163" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="/vins_estimator/imu_propagate/pose/pose/position/y" color="#d62728"/>
       <curve name="/vins_estimator/odometry/pose/pose/position/y" color="#f14cc1"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="39572.244983" bottom="-965.167787" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="/vins_estimator/imu_propagate/pose/pose/position/z" color="#1ac938"/>
       <curve name="/vins_estimator/odometry/pose/pose/position/z" color="#9467bd"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="tab2" containers="1">
   <Container>
    <DockSplitter orientation="-" sizes="0.332957;0.334086;0.332957" count="3">
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="0.130394" bottom="-0.044118" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="dx" color="#17becf"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="0.174150" bottom="-0.150281" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="dy" color="#bcbd22"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="0.077420" bottom="-0.048577" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="dz" color="#1f77b4"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="tab3" containers="1">
   <Container>
    <DockSplitter orientation="-" sizes="0.332957;0.334086;0.332957" count="3">
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="17.881650" bottom="-4.808604" left="22.622199" right="148.572018"/>
       <limitY/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="13.308357" bottom="-10.241072" left="22.622199" right="148.572018"/>
       <limitY/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="29.903638" bottom="2.520581" left="22.622199" right="148.572018"/>
       <limitY/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="tab4" containers="1">
   <Container>
    <DockSplitter orientation="-" sizes="1" count="1">
     <DockArea name="...">
      <plot flip_y="false" mode="TimeSeries" style="Lines" flip_x="false">
       <range top="174.295262" bottom="-4.251104" left="0.000000" right="178.396058"/>
       <limitY/>
       <curve name="s" color="#f14cc1"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="1"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default time_axis="" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="ROS Topic Subscriber">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS /rosout Visualization"/>
  <plugin ID="ROS Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations>
  <snippet name="dx">
   <global>firstX = 0
is_first = true</global>
   <function>if(if_first) then
    if_first = false
    firstX = value
    return 0
end

dx = value - firstX
firstX = value

if(dx > 1.0 or dx &lt; -1.0) then
    dx = 0
end
return dx</function>
   <linked_source>/vins_estimator/imu_propagate/pose/pose/position/x</linked_source>
  </snippet>
  <snippet name="dy">
   <global>firstX = 0
is_first = true</global>
   <function>if(if_first) then
    if_first = false
    firstX = value
    return 0
end

dx = value - firstX
firstX = value

if(dx > 1.0 or dx &lt; -1.0) then
    dx = 0
end
return dx</function>
   <linked_source>/vins_estimator/imu_propagate/pose/pose/position/y</linked_source>
  </snippet>
  <snippet name="dz">
   <global>firstX = 0
is_first = true</global>
   <function>if(if_first) then
    if_first = false
    firstX = value
    return 0
end

dx = value - firstX
firstX = value

if(dx > 1.0 or dx &lt; -1.0) then
    dx = 0
end
return dx</function>
   <linked_source>/vins_estimator/imu_propagate/pose/pose/position/z</linked_source>
  </snippet>
  <snippet name="s">
   <global>is_first = true
last_x = 0
last_y = 0
last_z = 0
path = 0</global>
   <function>if(if_first) then
    if(v2 &lt; 0.8) then
        return 0
    end
    if_first = false
    last_x = value
    last_y = v1
    last_z = v2
    return 0
end

if(math.abs(value) > 100  or math.abs(v1) > 100 or math.abs(v2) > 100) then
    return 0
end

dx2 = (value - last_x) * (value - last_x)
dy2 = (v1 - last_y) * (v1 - last_y)
dz2 = (v2 - last_z) * (v2 - last_z)
last_x = value
last_y = v1
last_z = v2
ds = math.sqrt(dx2+ dy2 + dz2)
path = path + ds

return path</function>
   <linked_source>/vins_estimator/imu_propagate/pose/pose/position/x</linked_source>
   <additional_sources>
    <v1>/vins_estimator/imu_propagate/pose/pose/position/y</v1>
    <v2>/vins_estimator/imu_propagate/pose/pose/position/z</v2>
   </additional_sources>
  </snippet>
 </customMathEquations>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

